# Usage of printLibrariesStatus function:
# This function is used to print the status of the libraries used in your project.
# You need to pass a list of library names as an argument.
# Example:
#   set(MY_LIBRARIES "lib1;lib2;lib3")
#   printLibrariesStatus(${MY_LIBRARIES})
function(printLibrariesStatus library_names)
  message("┌─${PROJECT_NAME}─${PROJECT_VERSION}───Dependencies──────")
  foreach(library_name ${library_names})
    string(LENGTH ${library_name} name_length)
    math(EXPR padding_length "30 - ${name_length}")
    string(RANDOM LENGTH ${padding_length} ALPHABET "." padding)
    if(${library_name}_FOUND OR ${library_name}_ADDED)
      message("│${library_name}${padding}✅  ${${library_name}_VERSION}")
    else()
      message("│${library_name}${padding}❌  NOT FOUND")
    endif()
  endforeach()
  message("└────────────────────────────────────────")
endfunction()


# Usage of printAllVariablesTerminatedBy function:
# This function is used to print all the CMake variables that end with a specific string.
# You need to pass the termination string as an argument.
# Example:
#   printAllVariablesTerminatedBy("_FOUND")
# This will print all the CMake variables that end with "_FOUND".
function(printAllVariablesTerminatedBy termination)
  get_cmake_property(_variableNames VARIABLES)
  foreach (_variableName ${_variableNames})
      string(REGEX MATCH "${termination}$" _isFoundVariable ${_variableName})
      if (_isFoundVariable)
          message(STATUS "${_variableName}=${${_variableName}}")
      endif()
  endforeach()
endfunction()

# Build configuration summary function
function(display_status)
    message(STATUS "")
    message(STATUS "==================== ScanForge Build Configuration ====================")
    message(STATUS "")
    message(STATUS "Project:              ${PROJECT_NAME}")
    message(STATUS "Version:              ${PROJECT_VERSION}")
    message(STATUS "Build type:           ${CMAKE_BUILD_TYPE}")
    message(STATUS "C++ standard:         ${CMAKE_CXX_STANDARD}")
    message(STATUS "Compiler:             ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
    message(STATUS "")
    message(STATUS "System Information:")
    message(STATUS "  System:             ${CMAKE_SYSTEM_NAME}")
    message(STATUS "  Processor:          ${CMAKE_SYSTEM_PROCESSOR}")
    if(WIN32)
        message(STATUS "  Platform:           Windows")
    elseif(ANDROID)
        message(STATUS "  Platform:           Android")
        message(STATUS "  Android ABI:        ${ANDROID_ABI}")
        message(STATUS "  Android API:        ${ANDROID_NATIVE_API_LEVEL}")
    elseif(APPLE)
        message(STATUS "  Platform:           macOS")
        message(STATUS "  Deployment Target:  ${CMAKE_OSX_DEPLOYMENT_TARGET}")
        message(STATUS "  Architectures:      ${CMAKE_OSX_ARCHITECTURES}")
    elseif(UNIX)
        message(STATUS "  Platform:           Linux")
    endif()
    message(STATUS "")
    message(STATUS "Build Configuration:")
    message(STATUS "  Source directory:   ${CMAKE_SOURCE_DIR}")
    message(STATUS "  Build directory:    ${CMAKE_BINARY_DIR}")
    message(STATUS "  Install prefix:     ${CMAKE_INSTALL_PREFIX}")
    message(STATUS "")
    message(STATUS "Output Directories:")
    message(STATUS "  Runtime:            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    message(STATUS "  Library:            ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    message(STATUS "  Archive:            ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
    message(STATUS "")
    message(STATUS "Features:")
    if(BUILD_TESTING)
        message(STATUS "  Testing:            Enabled")
    else()
        message(STATUS "  Testing:            Disabled")
    endif()
    if(Doxygen_FOUND)
        message(STATUS "  Documentation:      Enabled")
    else()
        message(STATUS "  Documentation:      Disabled")
    endif()
    message(STATUS "")
    message(STATUS "========================================================================")
    message(STATUS "")
endfunction()