---
# Clang-Tidy configuration for IvanaeSoftware
# Based on Google C++ Style Guide and C++ Core Guidelines
# Enforces coding standards from CONTRIBUTING.md

Checks: >
  -*,
  bugprone-*,
  -bugprone-easily-swappable-parameters,
  -bugprone-exception-escape,
  cert-*,
  -cert-dcl21-cpp,
  -cert-dcl50-cpp,
  -cert-env33-c,
  -cert-err34-c,
  -cert-err58-cpp,
  clang-analyzer-*,
  -clang-analyzer-cplusplus.NewDeleteLeaks,
  -clang-analyzer-optin.cplusplus.VirtualCall,
  concurrency-*,
  cppcoreguidelines-*,
  -cppcoreguidelines-avoid-c-arrays,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-macro-usage,
  -cppcoreguidelines-non-private-member-variables-in-classes,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -cppcoreguidelines-pro-bounds-constant-array-index,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-pro-type-union-access,
  -cppcoreguidelines-pro-type-vararg,
  google-*,
  -google-readability-avoid-underscore-in-googletest-name,
  -google-readability-todo,
  hicpp-*,
  -hicpp-avoid-c-arrays,
  -hicpp-braces-around-statements,
  -hicpp-named-parameter,
  -hicpp-no-array-decay,
  -hicpp-special-member-functions,
  -hicpp-uppercase-literal-suffix,
  -hicpp-use-auto,
  -hicpp-vararg,
  misc-*,
  -misc-const-correctness,
  -misc-include-cleaner,
  -misc-non-private-member-variables-in-classes,
  -misc-use-anonymous-namespace,
  modernize-*,
  -modernize-avoid-c-arrays,
  -modernize-use-auto,
  -modernize-use-trailing-return-type,
  performance-*,
  portability-*,
  readability-*,
  -readability-avoid-const-params-in-decls,
  -readability-braces-around-statements,
  -readability-function-cognitive-complexity,
  -readability-identifier-length,
  -readability-magic-numbers,
  -readability-named-parameter,
  -readability-uppercase-literal-suffix

CheckOptions:
  # Naming conventions from CONTRIBUTING.md
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.EnumCase
    value: CamelCase
  - key: readability-identifier-naming.UnionCase
    value: CamelCase
  - key: readability-identifier-naming.TypedefCase
    value: CamelCase
  - key: readability-identifier-naming.TypeAliasCase
    value: CamelCase
  - key: readability-identifier-naming.TemplateParameterCase
    value: CamelCase
  
  # Functions/Methods: lowerCamelCase
  - key: readability-identifier-naming.FunctionCase
    value: camelBack
  - key: readability-identifier-naming.MethodCase
    value: camelBack
  - key: readability-identifier-naming.PublicMethodCase
    value: camelBack
  - key: readability-identifier-naming.ProtectedMethodCase
    value: camelBack
  - key: readability-identifier-naming.PrivateMethodCase
    value: camelBack
  - key: readability-identifier-naming.VirtualMethodCase
    value: camelBack
  
  # Variables: lowerCamelCase
  - key: readability-identifier-naming.VariableCase
    value: camelBack
  - key: readability-identifier-naming.ParameterCase
    value: camelBack
  - key: readability-identifier-naming.LocalVariableCase
    value: camelBack
  - key: readability-identifier-naming.PublicMemberCase
    value: camelBack
  - key: readability-identifier-naming.ProtectedMemberCase
    value: camelBack
  - key: readability-identifier-naming.PrivateMemberCase
    value: camelBack
  - key: readability-identifier-naming.StaticVariableCase
    value: camelBack
  - key: readability-identifier-naming.GlobalVariableCase
    value: camelBack
  
  # Constants: lowerCamelCase
  - key: readability-identifier-naming.ConstantCase
    value: camelBack
  - key: readability-identifier-naming.ConstexprVariableCase
    value: camelBack
  - key: readability-identifier-naming.StaticConstantCase
    value: camelBack
  - key: readability-identifier-naming.GlobalConstantCase
    value: camelBack
  - key: readability-identifier-naming.ConstantMemberCase
    value: camelBack
  
  # Namespaces: lowercase
  - key: readability-identifier-naming.NamespaceCase
    value: lower_case
  
  # Enums: CamelCase for type, lowerCamelCase for values
  - key: readability-identifier-naming.EnumConstantCase
    value: camelBack
  
  # Macros: ALL_CAPS_WITH_UNDERSCORES (but discouraged)
  - key: readability-identifier-naming.MacroDefinitionCase
    value: UPPER_CASE
  
  # File naming: UpperCamelCase (handled by file system, not clang-tidy)
  
  # Google Style Guide specific settings
  - key: google-readability-function-size.StatementThreshold
    value: 800
  - key: google-readability-function-size.BranchThreshold
    value: 300
  - key: google-readability-function-size.ParameterThreshold
    value: 10
  - key: google-readability-function-size.NestingThreshold
    value: 10
  
  # Readability settings
  - key: readability-function-size.LineThreshold
    value: 200
  - key: readability-function-size.StatementThreshold
    value: 800
  - key: readability-function-size.BranchThreshold
    value: 300
  - key: readability-function-size.ParameterThreshold
    value: 10
  - key: readability-function-size.NestingThreshold
    value: 10
  
  # Performance settings
  - key: performance-for-range-copy.WarnOnAllAutoCopies
    value: true
  - key: performance-unnecessary-value-param.AllowedTypes
    value: 'std::function;std::unique_ptr;std::shared_ptr'
  
  # Modernize settings for C++23
  - key: modernize-use-nullptr.NullMacros
    value: 'NULL'
  - key: modernize-replace-auto-ptr.IncludeStyle
    value: google
  
  # Core Guidelines settings
  - key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor
    value: true
  - key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions
    value: false
  
  # Misc settings
  - key: misc-throw-by-value-catch-by-reference.CheckThrowTemporaries
    value: true

# Header filter for project files only
HeaderFilterRegex: '^.*/(backend|IVANAE_IHM)/.*\.(hpp|h)$'

# Exclude external dependencies and generated files
FormatStyle: google